<?xml version="1.0" encoding="utf-8"?>
<root>
  <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
  <b4x_version>11.00</b4x_version>
  <dependsOn>javaobject</dependsOn>
  <dependsOn>xui</dependsOn>
  <dependsOn>reflection</dependsOn>
  <class>
    <name>ba.uri.androidneturi</name>
    <shortname>AndroidNetURI</shortname>
    <owner>process</owner>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="BuildUpon">_buildupon</name>
      <comment>Constructs a new builder, copying the attributes from this Uri.
</comment>
      <returntype>ba.uri.androidneturibuilder</returntype>
    </method>
    <method>
      <name DesignerName="CompareTo">_compareto</name>
      <comment>Compares the string representation of this Uri with that of another.
</comment>
      <returntype>int</returntype>
      <parameter>
        <name>Other</name>
        <type>ba.uri.androidneturi</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Decode">_decode</name>
      <comment>Decodes '%'-escaped octets in the given string using the UTF-8 scheme. Replaces invalid octets with the unicode replacement character ("\\uFFFD").
S As String: encoded string to decode
Return: the given string with escaped octets decoded, or null if s is null
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>S</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Encode">_encode</name>
      <comment>Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes all other characters.
S As String: string to encode
Return: an encoded version of s suitable for use as a URI component, or null if s is null
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>S</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Encode2">_encode2</name>
      <comment>Encodes characters in the given string as '%'-escaped octets using the UTF-8 scheme. Leaves letters ("A-Z", "a-z"), numbers ("0-9"), and unreserved characters ("_-!.~'()*") intact. Encodes all other characters with the exception of those specified in the allow argument.
S As String: string to encode
Allow As String: set of additional characters to allow in the encoded form, null if no characters should be skipped
Return: an encoded version of s suitable for use as a URI component, or null if s is null
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>S</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Allow</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Equals">_equals</name>
      <comment>Compares this Uri to another object for equality. Returns true if the encoded string representations of this Uri and the given Uri are equal. Case counts. Paths are not normalized. If one Uri specifies a default port explicitly and the other leaves it implicit, they will not be considered equal.
O As Object: This value may be null.
Return: true if this object is the same as the obj argument; false otherwise.
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>O</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromFile">_fromfile</name>
      <comment>Creates a Uri from a file. The URI has the form "file://". Encodes path characters with the exception of '/'.
Example: "file:///tmp/android.txt"
FilePath As String: path to file
FileName As String: filename with extension
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>FilePath</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>FileName</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="FromParts">_fromparts</name>
      <comment>Creates an opaque Uri from the given components. Encodes the ssp which means this method cannot be used to create hierarchical URIs.
Scheme As String: of the URI
Ssp As String: scheme-specific-part, everything between the scheme separator (':') and the fragment separator ('#'), which will get encoded
Fragment As String: fragment, everything after the '#', null if undefined, will get encoded
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Scheme</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Ssp</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Fragment</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="getAuthority" HideFromIDE="true">_getauthority</name>
      <comment>Gets the decoded authority part of this URI. For server addresses, the authority is structured as follows: [ userinfo '@' ] host [ ':' port ]
Examples: "google.com", "bob@google.com:80"
Return: the authority for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="GetBooleanQueryParameter">_getbooleanqueryparameter</name>
      <comment>Searches the query string for the first value with the given key and interprets it as a boolean value. "false" and "0" are interpreted as false, everything else is interpreted as true.
Key As String: string which will be decoded
DefaultValue As Boolean:
Return: the default value to return if there is no query parameter for key
</comment>
      <returntype>boolean</returntype>
      <parameter>
        <name>Key</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>DefaultValue</name>
        <type>boolean</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="getEncodedAuthority" HideFromIDE="true">_getencodedauthority</name>
      <comment>Gets the encoded authority part of this URI. For server addresses, the authority is structured as follows: [ userinfo '@' ] host [ ':' port ]
Examples: "google.com", "bob@google.com:80"
Return: the authority for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getEncodedFragment" HideFromIDE="true">_getencodedfragment</name>
      <comment>Gets the encoded fragment part of this URI, everything after the '#'.
Return: the encoded fragment or null if there isn't one
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getEncodedPath" HideFromIDE="true">_getencodedpath</name>
      <comment>Gets the encoded path.
Return: the encoded path, or null if this is not a hierarchical URI (like "mailto:nobody@google.com") or the URI is invalid
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getEncodedQuery" HideFromIDE="true">_getencodedquery</name>
      <comment>Gets the encoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return "q=android" for "http://www.google.com/search?q=android".
Return: the encoded query or null if there isn't one
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getEncodedSchemeSpecificPart" HideFromIDE="true">_getencodedschemespecificpart</name>
      <comment>Gets the scheme-specific part of this URI, i.e. everything between the scheme separator ':' and the fragment separator '#'. If this is a relative URI, this method returns the entire URI. Leaves escaped octets intact.
Example: "//www.google.com/search?q=android"
Return: the encoded scheme-specific-part
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getEncodedUserInfo" HideFromIDE="true">_getencodeduserinfo</name>
      <comment>Gets the encoded user information from the authority. For example, if the authority is "nobody@google.com", this method will return "nobody".
Return: the user info for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getFragment" HideFromIDE="true">_getfragment</name>
      <comment>Gets the decoded fragment part of this URI, everything after the '#'.
Return: the decoded fragment or null if there isn't one
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getHost" HideFromIDE="true">_gethost</name>
      <comment>Gets the encoded host from the authority for this URI. For example, if the authority is "bob@google.com", this method will return "google.com".
Return: the host for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getLastPathSegment" HideFromIDE="true">_getlastpathsegment</name>
      <comment>Gets the decoded last segment in the path.
Return: the decoded last segment or null if the path is empty
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getPath" HideFromIDE="true">_getpath</name>
      <comment>Gets the decoded path.
Return: the decoded path, or null if this is not a hierarchical URI (like "mailto:nobody@google.com") or the URI is invalid
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getPathSegments" HideFromIDE="true">_getpathsegments</name>
      <comment>Gets the decoded path segments.
Return: decoded path segments, each without a leading or trailing '/'
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
    </method>
    <method>
      <name DesignerName="getPort" HideFromIDE="true">_getport</name>
      <comment>Gets the port from the authority for this URI. For example, if the authority is "google.com:80", this method will return 80.
Result: the port for this URI or -1 if invalid or not present
</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="getQuery" HideFromIDE="true">_getquery</name>
      <comment>Gets the decoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return "q=android" for "http://www.google.com/search?q=android".
Return: the decoded query or null if there isn't one
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="GetQueryParameter">_getqueryparameter</name>
      <comment>Searches the query string for the first value with the given key.
Warning: Prior to Jelly Bean, this decoded the '+' character as '+' rather than ' '.
Key As String: string which will be encoded
Return: the decoded value or null if no parameter is found
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Key</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="GetQueryParameters">_getqueryparameters</name>
      <comment>Searches the query string for parameter values with the given key.
Key As String: string which will be encoded
Return: a list of decoded values
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
      <parameter>
        <name>Key</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="getScheme" HideFromIDE="true">_getscheme</name>
      <comment>Gets the scheme of this URI. Example: "http"
Return: the scheme or null if this is a relative URI
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getSchemeSpecificPart" HideFromIDE="true">_getschemespecificpart</name>
      <comment>Gets the scheme-specific part of this URI, i.e. everything between the scheme separator ':' and the fragment separator '#'. If this is a relative URI, this method returns the entire URI. Decodes escaped octets.
Example: "//www.google.com/search?q=android"
Return: the decoded scheme-specific-part
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="getUserInfo" HideFromIDE="true">_getuserinfo</name>
      <comment>Gets the decoded user information from the authority. For example, if the authority is "nobody@google.com", this method will return "nobody".
Return: the user info for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="HashCode">_hashcode</name>
      <comment>Hashes the encoded string represention of this Uri consistently with equals(Object).
Return: a hash code value for this object.
</comment>
      <returntype>int</returntype>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object. ObjectFromJava to Null for a new instance.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>ObjectFromJava</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="IsAbsolute">_isabsolute</name>
      <comment>Returns true if this URI is absolute, i.e. if it contains an explicit scheme.
Return: true if this URI is absolute, false if it's relative
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsHierarchical">_ishierarchical</name>
      <comment>Returns true if this URI is hierarchical like "http://google.com". Absolute URIs are hierarchical if the scheme-specific part starts with a '/'. Relative URIs are always hierarchical.
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsOpaque">_isopaque</name>
      <comment>Returns true if this URI is opaque like "mailto:nobody@google.com". The scheme-specific part of an opaque URI cannot start with a '/'.
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="IsRelative">_isrelative</name>
      <comment>Returns true if this URI is relative, i.e. if it doesn't contain an explicit scheme.
</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="NormalizeScheme">_normalizescheme</name>
      <comment>Return an equivalent URI with a lowercase scheme component. This aligns the Uri with Android best practices for intent filtering.
For example, "HTTP://www.android.com" becomes "http://www.android.com"
All URIs received from outside Android (such As user input, Or external sources like Bluetooth, NFC, Or the Internet) should be normalized before they are used To create an Intent.
Result: normalized Uri (never null)
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="Parse">_parse</name>
      <comment>Creates a Uri which parses the given encoded URI string.
UriString As String: an RFC 2396-compliant, encoded URI
Return: Uri for this given uri string
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>UriString</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToObject">_toobject</name>
      <comment>Creates object from AndroidNetUri which can be used as android.net.Uri in java.
</comment>
      <returntype>Object</returntype>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns the encoded string representation of this URI. Example: "http://google.com/"
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="WithAppendedPath">_withappendedpath</name>
      <comment>Creates a new Uri by appending an already-encoded path segment to a base Uri.
BaseUri As AndroidNetURI: Uri to append path segment to
PathSegment As String: encoded path segment to append
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>BaseUri</name>
        <type>ba.uri.androidneturi</type>
      </parameter>
      <parameter>
        <name>PathSegment</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="WithAppendedPath2">_withappendedpath2</name>
      <comment>Creates a new Uri by appending an already-encoded path segment to a base Uri.
BaseUri As Object: Uri to append path segment to as android.net.Uri
PathSegment As String: encoded path segment to append
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>BaseUri</name>
        <type>Object</type>
      </parameter>
      <parameter>
        <name>PathSegment</name>
        <type>String</type>
      </parameter>
    </method>
    <property>
      <name DesignerName="Authority">_authority</name>
      <comment>Gets the decoded authority part of this URI. For server addresses, the authority is structured as follows: [ userinfo '@' ] host [ ':' port ]
Examples: "google.com", "bob@google.com:80"
Return: the authority for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedAuthority">_encodedauthority</name>
      <comment>Gets the encoded authority part of this URI. For server addresses, the authority is structured as follows: [ userinfo '@' ] host [ ':' port ]
Examples: "google.com", "bob@google.com:80"
Return: the authority for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedFragment">_encodedfragment</name>
      <comment>Gets the encoded fragment part of this URI, everything after the '#'.
Return: the encoded fragment or null if there isn't one
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedPath">_encodedpath</name>
      <comment>Gets the encoded path.
Return: the encoded path, or null if this is not a hierarchical URI (like "mailto:nobody@google.com") or the URI is invalid
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedQuery">_encodedquery</name>
      <comment>Gets the encoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return "q=android" for "http://www.google.com/search?q=android".
Return: the encoded query or null if there isn't one
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedSchemeSpecificPart">_encodedschemespecificpart</name>
      <comment>Gets the scheme-specific part of this URI, i.e. everything between the scheme separator ':' and the fragment separator '#'. If this is a relative URI, this method returns the entire URI. Leaves escaped octets intact.
Example: "//www.google.com/search?q=android"
Return: the encoded scheme-specific-part
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="EncodedUserInfo">_encodeduserinfo</name>
      <comment>Gets the encoded user information from the authority. For example, if the authority is "nobody@google.com", this method will return "nobody".
Return: the user info for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="Fragment">_fragment</name>
      <comment>Gets the decoded fragment part of this URI, everything after the '#'.
Return: the decoded fragment or null if there isn't one
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="Host">_host</name>
      <comment>Gets the encoded host from the authority for this URI. For example, if the authority is "bob@google.com", this method will return "google.com".
Return: the host for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="LastPathSegment">_lastpathsegment</name>
      <comment>Gets the decoded last segment in the path.
Return: the decoded last segment or null if the path is empty
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="Path">_path</name>
      <comment>Gets the decoded path.
Return: the decoded path, or null if this is not a hierarchical URI (like "mailto:nobody@google.com") or the URI is invalid
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="PathSegments">_pathsegments</name>
      <comment>Gets the decoded path segments.
Return: decoded path segments, each without a leading or trailing '/'
</comment>
      <returntype>anywheresoftware.b4a.objects.collections.List</returntype>
    </property>
    <property>
      <name DesignerName="Port">_port</name>
      <comment>Gets the port from the authority for this URI. For example, if the authority is "google.com:80", this method will return 80.
Result: the port for this URI or -1 if invalid or not present
</comment>
      <returntype>int</returntype>
    </property>
    <property>
      <name DesignerName="Query">_query</name>
      <comment>Gets the decoded query component from this URI. The query comes after the query separator ('?') and before the fragment separator ('#'). This method would return "q=android" for "http://www.google.com/search?q=android".
Return: the decoded query or null if there isn't one
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="Scheme">_scheme</name>
      <comment>Gets the scheme of this URI. Example: "http"
Return: the scheme or null if this is a relative URI
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="SchemeSpecificPart">_schemespecificpart</name>
      <comment>Gets the scheme-specific part of this URI, i.e. everything between the scheme separator ':' and the fragment separator '#'. If this is a relative URI, this method returns the entire URI. Decodes escaped octets.
Example: "//www.google.com/search?q=android"
Return: the decoded scheme-specific-part
</comment>
      <returntype>String</returntype>
    </property>
    <property>
      <name DesignerName="UserInfo">_userinfo</name>
      <comment>Gets the decoded user information from the authority. For example, if the authority is "nobody@google.com", this method will return "nobody".
Return: the user info for this URI or null if not present
</comment>
      <returntype>String</returntype>
    </property>
  </class>
  <class>
    <name>ba.uri.androidneturibuilder</name>
    <shortname>AndroidNetURIBuilder</shortname>
    <owner>process</owner>
    <method>
      <name>IsInitialized</name>
      <comment>Tests whether the object has been initialized.</comment>
      <returntype>boolean</returntype>
    </method>
    <method>
      <name DesignerName="AppendEncodedPath">_appendencodedpath</name>
      <comment>Appends the given segment to the path.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>NewSegment</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendPath">_appendpath</name>
      <comment>Encodes the given segment and appends it to the path.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>NewSegment</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="AppendQueryParameter">_appendqueryparameter</name>
      <comment>Encodes the key and value and then appends the parameter to the query string.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Key</name>
        <type>String</type>
      </parameter>
      <parameter>
        <name>Value</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Authority">_authority</name>
      <comment>Encodes and sets the authority.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Authority1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Build">_build</name>
      <comment>Constructs a Uri with the current attributes.
</comment>
      <returntype>ba.uri.androidneturi</returntype>
    </method>
    <method>
      <name DesignerName="ClearQuery">_clearquery</name>
      <comment>Clears the the previously set query.
</comment>
      <returntype>String</returntype>
    </method>
    <method>
      <name DesignerName="EncodedAuthority">_encodedauthority</name>
      <comment>Sets the previously encoded authority.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Authority1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EncodedFragment">_encodedfragment</name>
      <comment>Sets the previously encoded fragment.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Fragment1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EncodedOpaquePart">_encodedopaquepart</name>
      <comment>Sets the previously encoded opaque scheme-specific-part.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>OpaquePart1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EncodedPath">_encodedpath</name>
      <comment>Sets the previously encoded path.
If the path is not null and doesn't start with a '/', and if you specify a scheme and/or authority, the builder will prepend the given path with a '/'.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Path1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="EncodedQuery">_encodedquery</name>
      <comment>Sets the previously encoded query.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Query1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Fragment">_fragment</name>
      <comment>Encodes and sets the fragment.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Fragment1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Initialize">_initialize</name>
      <comment>Initializes the object. ObjectFromJava to Null for a new instance.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>ba</name>
        <type>anywheresoftware.b4a.BA</type>
      </parameter>
      <parameter>
        <name>ObjectFromJava</name>
        <type>Object</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="OpaquePart">_opaquepart</name>
      <comment>Encodes and sets the given opaque scheme-specific-part.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>OpaquePart1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Path">_path</name>
      <comment>Sets the path. Leaves '/' characters intact but encodes others as necessary.
If the path is not null and doesn't start with a '/', and if you specify a scheme and/or authority, the builder will prepend the given path with a '/'.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Path1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Query">_query</name>
      <comment>Encodes and sets the query.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Query1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="Scheme">_scheme</name>
      <comment>Sets the scheme.
</comment>
      <returntype>String</returntype>
      <parameter>
        <name>Scheme1</name>
        <type>String</type>
      </parameter>
    </method>
    <method>
      <name DesignerName="ToObject">_toobject</name>
      <comment>Creates object from AndroidNetUriBuilder which can be used as android.net.Uri.Builder in java.
</comment>
      <returntype>Object</returntype>
    </method>
    <method>
      <name DesignerName="ToString">_tostring</name>
      <comment>Returns a string representation of the object. In general, the toString method returns a string that "textually represents" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method.
The ToString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object
</comment>
      <returntype>String</returntype>
    </method>
  </class>
  <version>1</version>
  <author>Ivica Golubovic</author>
</root>